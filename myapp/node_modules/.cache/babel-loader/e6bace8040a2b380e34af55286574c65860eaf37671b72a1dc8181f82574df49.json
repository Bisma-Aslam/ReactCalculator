{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bisma\\\\OneDrive\\\\Desktop\\\\Calculator\\\\myapp\\\\src\\\\components\\\\Calculator.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Input from './Input';\nimport Keypad from './Keypad';\nimport Operands from './Operands.jsx';\nimport Operators from './Operators';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  const [inputValue, setInputValue] = React.useState('');\n  const [expressionParts, setExpressionParts] = React.useState([]);\n  const handleOperandClick = value => {\n    if (value === 'AC') {\n      setInputValue('');\n      setExpressionParts([]);\n    } else if (value === '%') {\n      // Handle percentage operation\n      handlePercentage();\n    } else if (value === '+/-') {\n      // Handle +/- operation\n      handleToggleSign();\n    } else {\n      setInputValue(prevValue => prevValue + value);\n      setExpressionParts(prevParts => [...prevParts, value]);\n    }\n  };\n  const handleToggleSign = () => {\n    const lastPartIndex = expressionParts.length - 1;\n    if (lastPartIndex >= 0 && !isNaN(expressionParts[lastPartIndex])) {\n      // Toggle the sign of the last number in the expression\n      const lastPart = expressionParts[lastPartIndex];\n      const toggledValue = lastPart.startsWith('-') ? lastPart.slice(1) : `-${lastPart}`;\n      expressionParts[lastPartIndex] = toggledValue;\n      setInputValue(expressionParts.join(''));\n    } else {\n      setInputValue('Error: Invalid +/-');\n    }\n  };\n  const handleKeypadClick = value => {\n    setInputValue(prevValue => prevValue + value);\n    setExpressionParts(prevParts => [...prevParts, value]);\n  };\n  const handleOperatorClick = value => {\n    if (value === '=') {\n      // Perform the calculation when '=' is clicked\n      calculateResult();\n    } else {\n      // Check for consecutive operators\n      const lastPart = expressionParts[expressionParts.length - 1];\n      if (!isOperator(lastPart)) {\n        // Record the entire expression when an operator is clicked\n        setExpressionParts(prevParts => [...prevParts, value]);\n        setInputValue(prevValue => prevValue + value);\n      } else if ((lastPart === '-' || lastPart === '+') && (value === '-' || value === '+')) {\n        // Replace the last operator with the new operator\n        const newParts = [...expressionParts];\n        newParts.pop();\n        newParts.push(value);\n        setExpressionParts(newParts);\n        setInputValue(prevValue => prevValue.slice(0, -1) + value);\n      } else if ((lastPart === '*' || lastPart === '/') && (value === '*' || value === '/')) {\n        // Replace the last operator with the new operator\n        const newParts = [...expressionParts];\n        newParts.pop();\n        newParts.push(value);\n        setExpressionParts(newParts);\n        setInputValue(prevValue => prevValue.slice(0, -1) + value);\n      } else if ((lastPart === '*' || lastPart === '/') && (value === '-' || value === '+')) {\n        //add operator to expression\n        const newParts = [...expressionParts];\n        newParts.push(value);\n        setExpressionParts(newParts);\n        setInputValue(prevValue => prevValue + value);\n      } else if ((lastPart === '-' || lastPart === '+') && (value === '*' || value === '/')) {\n        //replace operator with new operator\n        const newParts = [...expressionParts];\n        newParts.pop();\n        newParts.push(value);\n        setExpressionParts(newParts);\n        setInputValue(prevValue => prevValue.slice(0, -1) + value);\n      }\n    }\n  };\n  const calculateResult = () => {\n    try {\n      const result = eval(expressionParts.join(''));\n      setInputValue(result.toString());\n      setExpressionParts([result.toString()]); // Set expressionParts to result for further calculations\n    } catch (error) {\n      setInputValue('Error');\n      setExpressionParts([]);\n    }\n  };\n  const handlePercentage = () => {\n    // Handle percentage operation if there is a number before \"%\"\n    const lastPartIndex = expressionParts.length - 1;\n    if (lastPartIndex >= 0 && !isNaN(expressionParts[lastPartIndex])) {\n      const lastPart = parseFloat(expressionParts.pop()) / 100;\n      setInputValue(lastPart.toString());\n      setExpressionParts([lastPart.toString()]);\n    } else {\n      setInputValue('Error: Invalid Percentage');\n    }\n  };\n\n  // Helper function to check if a string is an operator\n  const isOperator = value => {\n    const operators = ['+', '-', '*', '/'];\n    return operators.includes(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calc\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: inputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"obj\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Operands, {\n          onOperandClick: handleOperandClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n          onKeypadClick: handleKeypadClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Operators, {\n        onOperatorClick: handleOperatorClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"NLI4XkMQUdeK/b/ixPpdCuWFUf8=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","Input","Keypad","Operands","Operators","jsxDEV","_jsxDEV","Calculator","_s","inputValue","setInputValue","useState","expressionParts","setExpressionParts","handleOperandClick","value","handlePercentage","handleToggleSign","prevValue","prevParts","lastPartIndex","length","isNaN","lastPart","toggledValue","startsWith","slice","join","handleKeypadClick","handleOperatorClick","calculateResult","isOperator","newParts","pop","push","result","eval","toString","error","parseFloat","operators","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onOperandClick","onKeypadClick","onOperatorClick","_c","$RefreshReg$"],"sources":["C:/Users/bisma/OneDrive/Desktop/Calculator/myapp/src/components/Calculator.jsx"],"sourcesContent":["import React from 'react'\r\nimport Input from './Input'\r\nimport Keypad from './Keypad'\r\nimport Operands from './Operands.jsx'\r\nimport Operators from './Operators'\r\nimport '../App.css'\r\n\r\n\r\nconst Calculator = () => {\r\n    const [inputValue, setInputValue] = React.useState('');\r\n  const [expressionParts, setExpressionParts] = React.useState([]);\r\n\r\n  const handleOperandClick = (value) => {\r\n    if (value === 'AC') {\r\n      setInputValue('');\r\n      setExpressionParts([]);\r\n    } else if (value === '%') {\r\n      // Handle percentage operation\r\n      handlePercentage();\r\n    } else if (value === '+/-') {\r\n      // Handle +/- operation\r\n      handleToggleSign();\r\n    } else {\r\n      setInputValue((prevValue) => prevValue + value);\r\n      setExpressionParts((prevParts) => [...prevParts, value]);\r\n    }\r\n  };\r\n  const handleToggleSign = () => {\r\n    const lastPartIndex = expressionParts.length - 1;\r\n    if (lastPartIndex >= 0 && !isNaN(expressionParts[lastPartIndex])) {\r\n      // Toggle the sign of the last number in the expression\r\n      const lastPart = expressionParts[lastPartIndex];\r\n      const toggledValue = lastPart.startsWith('-') ? lastPart.slice(1) : `-${lastPart}`;\r\n      expressionParts[lastPartIndex] = toggledValue;\r\n      setInputValue(expressionParts.join(''));\r\n    } else {\r\n      setInputValue('Error: Invalid +/-');\r\n    }\r\n  };\r\n  \r\n\r\n  const handleKeypadClick = (value) => {\r\n    setInputValue((prevValue) => prevValue + value);\r\n    setExpressionParts((prevParts) => [...prevParts, value]);\r\n  };\r\n\r\n  const handleOperatorClick = (value) => {\r\n    if (value === '=') {\r\n      // Perform the calculation when '=' is clicked\r\n      calculateResult();\r\n    } else {\r\n      // Check for consecutive operators\r\n      const lastPart = expressionParts[expressionParts.length - 1];\r\n      if (!isOperator(lastPart)) {\r\n        // Record the entire expression when an operator is clicked\r\n        setExpressionParts((prevParts) => [...prevParts, value]);\r\n        setInputValue((prevValue) => prevValue + value);\r\n      }\r\n      else if ((lastPart === '-' || lastPart==='+') && (value === '-' || value === '+')) {\r\n        // Replace the last operator with the new operator\r\n        const newParts = [...expressionParts];\r\n        newParts.pop();\r\n        newParts.push(value);\r\n        setExpressionParts(newParts);\r\n        setInputValue((prevValue) => prevValue.slice(0, -1) + value);\r\n      }\r\n      else if ((lastPart === '*' || lastPart==='/') && (value === '*' || value === '/')) {\r\n        // Replace the last operator with the new operator\r\n        const newParts = [...expressionParts];\r\n        newParts.pop();\r\n        newParts.push(value);\r\n        setExpressionParts(newParts);\r\n        setInputValue((prevValue) => prevValue.slice(0, -1) + value);\r\n      }\r\n      else if ((lastPart === '*' || lastPart==='/') && (value === '-' || value === '+')) {\r\n        //add operator to expression\r\n        const newParts = [...expressionParts];\r\n        newParts.push(value);\r\n        setExpressionParts(newParts);\r\n        setInputValue((prevValue) => prevValue + value);\r\n      }\r\n      else if ((lastPart === '-' || lastPart==='+') && (value === '*' || value === '/')) {\r\n        //replace operator with new operator\r\n        const newParts = [...expressionParts];\r\n        newParts.pop();\r\n        newParts.push(value);\r\n        setExpressionParts(newParts);\r\n        setInputValue((prevValue) => prevValue.slice(0, -1) + value);\r\n      }\r\n\r\n    }\r\n  };\r\n\r\n  const calculateResult = () => {\r\n    try {\r\n      const result = eval(expressionParts.join(''));\r\n      setInputValue(result.toString());\r\n      \r\n      setExpressionParts([result.toString()]); // Set expressionParts to result for further calculations\r\n    } catch (error) {\r\n      setInputValue('Error');\r\n      setExpressionParts([]);\r\n    }\r\n  };\r\n\r\n  const handlePercentage = () => {\r\n    // Handle percentage operation if there is a number before \"%\"\r\n    const lastPartIndex = expressionParts.length - 1;\r\n    if (lastPartIndex >= 0 && !isNaN(expressionParts[lastPartIndex])) {\r\n      const lastPart = parseFloat(expressionParts.pop()) / 100;\r\n      setInputValue(lastPart.toString());\r\n      setExpressionParts([lastPart.toString()]);\r\n    } else {\r\n      setInputValue('Error: Invalid Percentage');\r\n    }\r\n  };\r\n\r\n  // Helper function to check if a string is an operator\r\n  const isOperator = (value) => {\r\n    const operators = ['+', '-', '*', '/'];\r\n    return operators.includes(value);\r\n  };\r\n  return (\r\n    <div className='calc'>\r\n    <Input value={inputValue} />\r\n      <div className=\"obj\">\r\n        <div>\r\n          <Operands onOperandClick={handleOperandClick} />\r\n          <Keypad onKeypadClick={handleKeypadClick} />\r\n        </div>\r\n        <Operators onOperatorClick={handleOperatorClick} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calculator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}